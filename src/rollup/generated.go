// Package rollup provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package rollup

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for FinishStatus.
const (
	Accept FinishStatus = "accept"
	Reject FinishStatus = "reject"
)

// Defines values for RollupRequestRequestType.
const (
	AdvanceState RollupRequestRequestType = "advance_state"
	InspectState RollupRequestRequestType = "inspect_state"
)

// Advance defines model for Advance.
type Advance struct {
	Metadata Metadata `json:"metadata"`

	// Payload The payload is in the Ethereum hex binary format.
	// The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
	// For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
	// An empty payload is represented by the string '0x'.
	Payload Payload `json:"payload"`
}

// Error Detailed error message.
type Error = string

// Exception defines model for Exception.
type Exception struct {
	// Payload The payload is in the Ethereum hex binary format.
	// The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
	// For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
	// An empty payload is represented by the string '0x'.
	Payload Payload `json:"payload"`
}

// Finish defines model for Finish.
type Finish struct {
	Status FinishStatus `json:"status"`
}

// FinishStatus defines model for Finish.Status.
type FinishStatus string

// GioRequest defines model for GioRequest.
type GioRequest struct {
	// Domain An arbitrary number representing the request domain.
	Domain uint16 `json:"domain"`

	// Id Domain-specific information identifying the request.
	Id string `json:"id"`
}

// GioResponseRollup defines model for GioResponseRollup.
type GioResponseRollup struct {
	// Code A number representing the response code.
	Code uint16 `json:"code"`

	// Data The response data.
	Data string `json:"data"`
}

// IndexResponse defines model for IndexResponse.
type IndexResponse struct {
	// Index Position in the Merkle tree.
	Index uint64 `json:"index"`
}

// Inspect defines model for Inspect.
type Inspect struct {
	// Payload The payload contains arbitrary hex-encoded binary data.
	// The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
	// For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
	// An empty payload is represented by the string '0x'.
	Payload string `json:"payload"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	// AppContract 20-byte address of the application contract.
	AppContract string `json:"app_contract"`

	// BlockNumber Block number when input was posted.
	BlockNumber uint64 `json:"block_number"`

	// BlockTimestamp Unix timestamp of block in milliseconds.
	BlockTimestamp uint64 `json:"block_timestamp"`

	// ChainId Network identifier.
	ChainId uint64 `json:"chain_id"`

	// EpochIndex Deprecated. Always receives 0.
	EpochIndex uint64 `json:"epoch_index"`

	// InputIndex Input index starting from genesis.
	InputIndex uint64 `json:"input_index"`

	// MsgSender 20-byte address of the account that submitted the input.
	MsgSender string `json:"msg_sender"`

	// PrevRandao The latest RANDAO mix of the post beacon state of the previous block.
	PrevRandao uint64 `json:"prev_randao"`
}

// Notice defines model for Notice.
type Notice struct {
	// Payload The payload is in the Ethereum hex binary format.
	// The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
	// For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
	// An empty payload is represented by the string '0x'.
	Payload Payload `json:"payload"`
}

// Payload The payload is in the Ethereum hex binary format.
// The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
// For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
// An empty payload is represented by the string '0x'.
type Payload = string

// Report defines model for Report.
type Report struct {
	// Payload The payload is in the Ethereum hex binary format.
	// The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
	// For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
	// An empty payload is represented by the string '0x'.
	Payload Payload `json:"payload"`
}

// RollupRequest defines model for RollupRequest.
type RollupRequest struct {
	Data        RollupRequest_Data       `json:"data"`
	RequestType RollupRequestRequestType `json:"request_type"`
}

// RollupRequest_Data defines model for RollupRequest.Data.
type RollupRequest_Data struct {
	union json.RawMessage
}

// RollupRequestRequestType defines model for RollupRequest.RequestType.
type RollupRequestRequestType string

// Voucher defines model for Voucher.
type Voucher struct {
	// Destination 20-byte address of the destination contract for which the payload will be sent.
	Destination string `json:"destination"`

	// Payload String in Ethereum hex binary format describing a method call to be executed by the destination contract.
	// The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
	// For instance, '0xcdcd77c0' corresponds to a payload with length 4 and bytes 205, 205, 119, 192.
	// To describe the method call, the payload should consist of a function selector (method identifier) followed
	// by its ABI-encoded arguments.
	// ref: https://docs.soliditylang.org/en/v0.8.19/abi-spec.html
	Payload string `json:"payload"`

	// Value A big-endian 32-byte unsigned integer in hex.
	Value string `json:"value"`
}

// RegisterExceptionJSONRequestBody defines body for RegisterException for application/json ContentType.
type RegisterExceptionJSONRequestBody = Exception

// FinishJSONRequestBody defines body for Finish for application/json ContentType.
type FinishJSONRequestBody = Finish

// GioJSONRequestBody defines body for Gio for application/json ContentType.
type GioJSONRequestBody = GioRequest

// AddNoticeJSONRequestBody defines body for AddNotice for application/json ContentType.
type AddNoticeJSONRequestBody = Notice

// AddReportJSONRequestBody defines body for AddReport for application/json ContentType.
type AddReportJSONRequestBody = Report

// AddVoucherJSONRequestBody defines body for AddVoucher for application/json ContentType.
type AddVoucherJSONRequestBody = Voucher

// AsAdvance returns the union data inside the RollupRequest_Data as a Advance
func (t RollupRequest_Data) AsAdvance() (Advance, error) {
	var body Advance
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAdvance overwrites any union data inside the RollupRequest_Data as the provided Advance
func (t *RollupRequest_Data) FromAdvance(v Advance) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAdvance performs a merge with any union data inside the RollupRequest_Data, using the provided Advance
func (t *RollupRequest_Data) MergeAdvance(v Advance) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInspect returns the union data inside the RollupRequest_Data as a Inspect
func (t RollupRequest_Data) AsInspect() (Inspect, error) {
	var body Inspect
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInspect overwrites any union data inside the RollupRequest_Data as the provided Inspect
func (t *RollupRequest_Data) FromInspect(v Inspect) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInspect performs a merge with any union data inside the RollupRequest_Data, using the provided Inspect
func (t *RollupRequest_Data) MergeInspect(v Inspect) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RollupRequest_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RollupRequest_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// RegisterExceptionWithBody request with any body
	RegisterExceptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterException(ctx context.Context, body RegisterExceptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinishWithBody request with any body
	FinishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Finish(ctx context.Context, body FinishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GioWithBody request with any body
	GioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Gio(ctx context.Context, body GioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddNoticeWithBody request with any body
	AddNoticeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddNotice(ctx context.Context, body AddNoticeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddReportWithBody request with any body
	AddReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddReport(ctx context.Context, body AddReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddVoucherWithBody request with any body
	AddVoucherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddVoucher(ctx context.Context, body AddVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RegisterExceptionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterExceptionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterException(ctx context.Context, body RegisterExceptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterExceptionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinishWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinishRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Finish(ctx context.Context, body FinishJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinishRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GioWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGioRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Gio(ctx context.Context, body GioJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGioRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNoticeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNoticeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddNotice(ctx context.Context, body AddNoticeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddNoticeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddReportWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddReportRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddReport(ctx context.Context, body AddReportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddReportRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVoucherWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVoucherRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddVoucher(ctx context.Context, body AddVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddVoucherRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRegisterExceptionRequest calls the generic RegisterException builder with application/json body
func NewRegisterExceptionRequest(server string, body RegisterExceptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterExceptionRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterExceptionRequestWithBody generates requests for RegisterException with any type of body
func NewRegisterExceptionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/exception")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFinishRequest calls the generic Finish builder with application/json body
func NewFinishRequest(server string, body FinishJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFinishRequestWithBody(server, "application/json", bodyReader)
}

// NewFinishRequestWithBody generates requests for Finish with any type of body
func NewFinishRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/finish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGioRequest calls the generic Gio builder with application/json body
func NewGioRequest(server string, body GioJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGioRequestWithBody(server, "application/json", bodyReader)
}

// NewGioRequestWithBody generates requests for Gio with any type of body
func NewGioRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/gio")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddNoticeRequest calls the generic AddNotice builder with application/json body
func NewAddNoticeRequest(server string, body AddNoticeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddNoticeRequestWithBody(server, "application/json", bodyReader)
}

// NewAddNoticeRequestWithBody generates requests for AddNotice with any type of body
func NewAddNoticeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/notice")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddReportRequest calls the generic AddReport builder with application/json body
func NewAddReportRequest(server string, body AddReportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddReportRequestWithBody(server, "application/json", bodyReader)
}

// NewAddReportRequestWithBody generates requests for AddReport with any type of body
func NewAddReportRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/report")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddVoucherRequest calls the generic AddVoucher builder with application/json body
func NewAddVoucherRequest(server string, body AddVoucherJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddVoucherRequestWithBody(server, "application/json", bodyReader)
}

// NewAddVoucherRequestWithBody generates requests for AddVoucher with any type of body
func NewAddVoucherRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/voucher")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RegisterExceptionWithBodyWithResponse request with any body
	RegisterExceptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterExceptionResponse, error)

	RegisterExceptionWithResponse(ctx context.Context, body RegisterExceptionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterExceptionResponse, error)

	// FinishWithBodyWithResponse request with any body
	FinishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinishResponse, error)

	FinishWithResponse(ctx context.Context, body FinishJSONRequestBody, reqEditors ...RequestEditorFn) (*FinishResponse, error)

	// GioWithBodyWithResponse request with any body
	GioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GioResponse, error)

	GioWithResponse(ctx context.Context, body GioJSONRequestBody, reqEditors ...RequestEditorFn) (*GioResponse, error)

	// AddNoticeWithBodyWithResponse request with any body
	AddNoticeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNoticeResponse, error)

	AddNoticeWithResponse(ctx context.Context, body AddNoticeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNoticeResponse, error)

	// AddReportWithBodyWithResponse request with any body
	AddReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddReportResponse, error)

	AddReportWithResponse(ctx context.Context, body AddReportJSONRequestBody, reqEditors ...RequestEditorFn) (*AddReportResponse, error)

	// AddVoucherWithBodyWithResponse request with any body
	AddVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVoucherResponse, error)

	AddVoucherWithResponse(ctx context.Context, body AddVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVoucherResponse, error)
}

type RegisterExceptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegisterExceptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterExceptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RollupRequest
}

// Status returns HTTPResponse.Status
func (r FinishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GioResponseRollup
}

// Status returns HTTPResponse.Status
func (r GioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddNoticeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IndexResponse
}

// Status returns HTTPResponse.Status
func (r AddNoticeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddNoticeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddReportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddReportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddReportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddVoucherResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *IndexResponse
}

// Status returns HTTPResponse.Status
func (r AddVoucherResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddVoucherResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RegisterExceptionWithBodyWithResponse request with arbitrary body returning *RegisterExceptionResponse
func (c *ClientWithResponses) RegisterExceptionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterExceptionResponse, error) {
	rsp, err := c.RegisterExceptionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterExceptionResponse(rsp)
}

func (c *ClientWithResponses) RegisterExceptionWithResponse(ctx context.Context, body RegisterExceptionJSONRequestBody, reqEditors ...RequestEditorFn) (*RegisterExceptionResponse, error) {
	rsp, err := c.RegisterException(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterExceptionResponse(rsp)
}

// FinishWithBodyWithResponse request with arbitrary body returning *FinishResponse
func (c *ClientWithResponses) FinishWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FinishResponse, error) {
	rsp, err := c.FinishWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinishResponse(rsp)
}

func (c *ClientWithResponses) FinishWithResponse(ctx context.Context, body FinishJSONRequestBody, reqEditors ...RequestEditorFn) (*FinishResponse, error) {
	rsp, err := c.Finish(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinishResponse(rsp)
}

// GioWithBodyWithResponse request with arbitrary body returning *GioResponse
func (c *ClientWithResponses) GioWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GioResponse, error) {
	rsp, err := c.GioWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGioResponse(rsp)
}

func (c *ClientWithResponses) GioWithResponse(ctx context.Context, body GioJSONRequestBody, reqEditors ...RequestEditorFn) (*GioResponse, error) {
	rsp, err := c.Gio(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGioResponse(rsp)
}

// AddNoticeWithBodyWithResponse request with arbitrary body returning *AddNoticeResponse
func (c *ClientWithResponses) AddNoticeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddNoticeResponse, error) {
	rsp, err := c.AddNoticeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNoticeResponse(rsp)
}

func (c *ClientWithResponses) AddNoticeWithResponse(ctx context.Context, body AddNoticeJSONRequestBody, reqEditors ...RequestEditorFn) (*AddNoticeResponse, error) {
	rsp, err := c.AddNotice(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddNoticeResponse(rsp)
}

// AddReportWithBodyWithResponse request with arbitrary body returning *AddReportResponse
func (c *ClientWithResponses) AddReportWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddReportResponse, error) {
	rsp, err := c.AddReportWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddReportResponse(rsp)
}

func (c *ClientWithResponses) AddReportWithResponse(ctx context.Context, body AddReportJSONRequestBody, reqEditors ...RequestEditorFn) (*AddReportResponse, error) {
	rsp, err := c.AddReport(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddReportResponse(rsp)
}

// AddVoucherWithBodyWithResponse request with arbitrary body returning *AddVoucherResponse
func (c *ClientWithResponses) AddVoucherWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddVoucherResponse, error) {
	rsp, err := c.AddVoucherWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVoucherResponse(rsp)
}

func (c *ClientWithResponses) AddVoucherWithResponse(ctx context.Context, body AddVoucherJSONRequestBody, reqEditors ...RequestEditorFn) (*AddVoucherResponse, error) {
	rsp, err := c.AddVoucher(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddVoucherResponse(rsp)
}

// ParseRegisterExceptionResponse parses an HTTP response from a RegisterExceptionWithResponse call
func ParseRegisterExceptionResponse(rsp *http.Response) (*RegisterExceptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterExceptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFinishResponse parses an HTTP response from a FinishWithResponse call
func ParseFinishResponse(rsp *http.Response) (*FinishResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RollupRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGioResponse parses an HTTP response from a GioWithResponse call
func ParseGioResponse(rsp *http.Response) (*GioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GioResponseRollup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddNoticeResponse parses an HTTP response from a AddNoticeWithResponse call
func ParseAddNoticeResponse(rsp *http.Response) (*AddNoticeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddNoticeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IndexResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseAddReportResponse parses an HTTP response from a AddReportWithResponse call
func ParseAddReportResponse(rsp *http.Response) (*AddReportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddReportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAddVoucherResponse parses an HTTP response from a AddVoucherWithResponse call
func ParseAddVoucherResponse(rsp *http.Response) (*AddVoucherResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddVoucherResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest IndexResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Register an exception
	// (POST /exception)
	RegisterException(ctx echo.Context) error
	// Finish and get next request
	// (POST /finish)
	Finish(ctx echo.Context) error
	// Generic Input/Output
	// (POST /gio)
	Gio(ctx echo.Context) error
	// Add a new notice
	// (POST /notice)
	AddNotice(ctx echo.Context) error
	// Add a new report
	// (POST /report)
	AddReport(ctx echo.Context) error
	// Add a new voucher
	// (POST /voucher)
	AddVoucher(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// RegisterException converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterException(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterException(ctx)
	return err
}

// Finish converts echo context to params.
func (w *ServerInterfaceWrapper) Finish(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Finish(ctx)
	return err
}

// Gio converts echo context to params.
func (w *ServerInterfaceWrapper) Gio(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Gio(ctx)
	return err
}

// AddNotice converts echo context to params.
func (w *ServerInterfaceWrapper) AddNotice(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddNotice(ctx)
	return err
}

// AddReport converts echo context to params.
func (w *ServerInterfaceWrapper) AddReport(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddReport(ctx)
	return err
}

// AddVoucher converts echo context to params.
func (w *ServerInterfaceWrapper) AddVoucher(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddVoucher(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/exception", wrapper.RegisterException)
	router.POST(baseURL+"/finish", wrapper.Finish)
	router.POST(baseURL+"/gio", wrapper.Gio)
	router.POST(baseURL+"/notice", wrapper.AddNotice)
	router.POST(baseURL+"/report", wrapper.AddReport)
	router.POST(baseURL+"/voucher", wrapper.AddVoucher)

}
